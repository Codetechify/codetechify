name: Create Pull Request and Update Label

on:
  push:
    branches:
      - 'feature/*'

jobs:
  create-pull-request-and-update-label:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}
          persist-credentials: true

      - name: Check Commit Message Format
        id: commit-check
        run: |
          if [[ "$(git log -1 --pretty=%B)" =~ ^[a-zA-Z]+: ]]; then
            echo "matched=true" >> $GITHUB_ENV
            echo "matched=true" >> $GITHUB_OUTPUT
          else
            echo "matched=false" >> $GITHUB_ENV
            echo "matched=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Status in Project
        if: env.matched == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const query = `
              query getNecessaryIds($login: String!, $name: String!, $last: Int, $labels: [String!], $number: Int!, $first: Int, $first2: Int) {
                organization(login: $login) {
                  repository(name: $name) {
                    issues(last: $last, labels: $labels) {
                      nodes {
                        id
                      }
                    }
                    projectV2(number: $number) {
                      id
                      fields(first: $first) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: $first2) {
                        nodes {
                          id
                        }
                      }
                    }
                  }
                }
              }`;
            const variables = {
              "login": "Codetechify",
              "name": "codetechify-repo",
              "last": 1,
              "labels": ["feature", "doing"],
              "number": 2,
              "first": 10,
              "first2": 10
            };
            const result = await github.graphql(query, variables);
            const projectId = result.organization.repository.projectV2.id;
            const fieldId = result.organization.repository.projectV2.fields.nodes.find(node => node.name === 'Status').id;
            const itemId = result.organization.repository.projectV2.items.nodes[0].id;
            const pendingReviewOptionId = result.organization.repository.projectV2.fields.nodes.find(node => node.name === 'Status').options.find(option => option.name === 'Pending to Review').id;

            const mutation = `
            mutation updateStatus($input: UpdateProjectV2ItemFieldValueInput!) {
              updateProjectV2ItemFieldValue(input: $input) {
                projectV2Item {
                  id
                }
              }
            }`;
            const mutationVariables = {
              "input": {
                "projectId": projectId,
                "fieldId": fieldId,
                "itemId": itemId,
                "value": {
                  "singleSelectOptionId": pendingReviewOptionId
                }
              }
            };
            await github.graphql(mutation, mutationVariables);
          github-token: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}

      - name: Get Last Issue Number
        id: get-issue
        uses: actions/github-script@v6
        with:
          script: |
            const query = `
              query getLastIssue($login: String!, $name: String!, $last: Int, $labels: [String!]) {
                organization(login: $login) {
                  repository(name: $name) {
                    issues(last: $last, labels: $labels) {
                      nodes {
                        number
                      }
                    }
                  }
                }
              }`;
            const result = await github.graphql(query, {
              login: "Codetechify",
              name: "codetechify-repo",
              last: 1,
              labels: ["feature", "doing"]
            });
            const issueNumber = result.organization.repository.issues.nodes[0].number;
            return issueNumber;
          github-token: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}

      - name: Fetch Issue Title
        id: fetch-issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ steps.get-issue.outputs.result }};
            console.log("Issue number: ", issueNumber); // Debugging
            if (!issueNumber) {
              throw new Error('Issue number is undefined or null');
            }
            const issueResponse = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const issueTitle = issueResponse.data.title;
            return issueTitle;
          github-token: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}

      - name: Create Pull Request
        if: env.matched == 'true'
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}
          pr_title: ${{ steps.fetch-issue.outputs.result }}
          pr_body: 'Automatically generated pull request. Closes #${{ steps.get-issue.outputs.result }}'
          source_branch: ${{ env.feature_branch }}
          destination_branch: 'main'

      - name: Replace Label and Link PR to Issue
        if: env.matched == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ steps.get-issue.outputs.result }};
            console.log("Issue number: ", issueNumber); // Debugging

            async function updateIssueLabels() {
              const labelsResponse = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              const hasDoing = labelsResponse.data.some(label => label.name === 'doing');
              if (hasDoing) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  name: 'doing'
                });
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['isReviewing']
                });
              }
            }

            await updateIssueLabels();
          github-token: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}
