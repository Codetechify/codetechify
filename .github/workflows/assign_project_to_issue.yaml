name: Assign Issue to Project

on:
  issues:
    types: [labeled]

jobs:
  assign-project:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'feature'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install @octokit/graphql

      - name: Get Issue and Project ID
        id: get-ids
        run: |
          const { graphql } = require("@octokit/graphql");
          const graphqlWithAuth = graphql.defaults({
            headers: {
              authorization: `token ${process.env.CODETECHIFY_ACCESS_TOKEN}`,
            },
          });

          async function run() {
            const issueAndProjectQuery = `
              query getIssueAndProjectId($name: String!, $owner: String!, $states: [IssueState!], $number: Int!) {
                repository(name: $name, owner: $owner) {
                  issues(last: 1, states: $states) {
                    nodes {
                      id
                    }
                  }
                  projectV2(number: $number) {
                    id
                  }
                }
              }
            `;

            const response = await graphqlWithAuth(issueAndProjectQuery, {
              name: 'codetechify-repo',
              owner: 'Codetechify',
              states: ['OPEN'],
              number: 2
            });

            return {
              issueId: response.repository.issues.nodes[0].id,
              projectId: response.repository.projectV2.id
            };
          }

          run().then((data) => {
            console.log(`::set-output name=issueId::${data.issueId}`);
            console.log(`::set-output name=projectId::${data.projectId}`);
          });
        env:
          CODETECHIFY_ACCESS_TOKEN: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}

      - name: Assign Project to Issue
        run: |
          const { graphql } = require("@octokit/graphql");
          const graphqlWithAuth = graphql.defaults({
            headers: {
              authorization: `token ${process.env.CODETECHIFY_ACCESS_TOKEN}`,
            },
          });

          const assignProjectMutation = `
            mutation assignProjectToIssue($issueId: ID!, $projectId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                item {
                  id
                }
              }
            }
          `;

          graphqlWithAuth(assignProjectMutation, {
            issueId: ${{ steps.get-ids.outputs.issueId }},
            projectId: ${{ steps.get-ids.outputs.projectId }}
          });
        env:
          CODETECHIFY_ACCESS_TOKEN: ${{ secrets.CODETECHIFY_ACCESS_TOKEN }}
