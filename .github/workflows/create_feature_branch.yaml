name: Issue Automation Workflow

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write

jobs:
  process_issue:
    if: github.event.label.name == 'doing'
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Create a new branch named after the issue title
      - name: Create new branch
        run: |
          ISSUE_TITLE=$(echo "${{ github.event.issue.title }}" | sed -e "s/[^[:alnum:]]/-/g" | sed -e "s/^-//" | sed -e "s/-*$//")
          BRANCH_NAME="feature/${ISSUE_TITLE,,}"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

      # Fetch the Field ID for the 'Status' field
      - name: Fetch Project Field ID
        id: fetch_field
        uses: octokit/graphql-action@v2.2.25
        with:
          query: |
            query projectFields(
              $name: String!
              $owner: String!
              $number: Int!
              $fieldName2: String!
            ) {
              repository(name: $name, owner: $owner) {
                projectV2(number: $number) {
                  field(name: $fieldName2) {
                    ... on ProjectV2SingleSelectField {
                      id
                    }
                  }
                }
              }
            }
          variables: |
            {
              "name": "codetechify-repo", # Replace with your actual repository name
              "owner": "Codetechify", # Replace with your actual owner name
              "number": 2, # Replace with your actual project number
              "fieldName2": "Status" # Replace with your actual field name
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update the Project v2 field status to "Doing"
      - name: Update Project Status
        if: steps.fetch_field.outputs.data
        uses: octokit/graphql-action@v2.2.25
        with:
          query: |
            mutation UpdateProjectField($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $fieldId
                value: $value
              }) {
                projectV2Item {
                  id
                }
              }
            }
          variables: |
            {
              "projectId": "your_project_node_id", # Replace with your actual project node ID
              "itemId": "${{ github.event.issue.node_id }}",
              "fieldId": "${{ fromJSON(steps.fetch_field.outputs.data).repository.projectV2.field.id }}",
              "value": "Doing" # The value you want to set
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
